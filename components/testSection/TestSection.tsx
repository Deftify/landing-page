import React, { useRef, useEffect, useState } from 'react'
import { eventEmitter } from '@/utils'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/dist/ScrollTrigger'
import Scrollbar from 'smooth-scrollbar'
import styles from './TestSection.module.scss'

const tokenSummaries = [
  {
    icon: '/svgs/icon-eth.svg',
    title: 'Guild Gems',
    description:
      'Guild Gems(GDG) are the governance token for the Guild Protocol. Guild holders will be able to claim rewards if they stake their tokens, play tournaments, and participate in key governance.',
    alert: 'alert',
    coin: '/svgs/icon-news.svg',
  },
  {
    icon: '/svgs/icon-doge.svg',
    title: 'Guild Coins',
    description:
      'Guild Coin ($GDC) is the main in-game currency used in Guild Protocol. GDC holders will be able to rent items and upgrades in the shop, buy collectibles in the marketplace, create clans, upgrade Avatars, purchase battelepass tickets etc.',
    alert: 'alert',
    coin: '/svgs/bnb.svg',
  },
  {
    icon: '/svgs/icon-dots.svg',
    title: 'Guild Dust',
    description:
      'Guild Dust ($GDD) extends the usefulness of items beyond the gameplay itself and decrease the friction generated by Loots. Dust holders will be able to craft items, purchase skill gems and avatar skins. Dusts are not tradeable.',
    alert: 'alert',
    coin: '/svgs/shib.svg',
  },
]

const TestSection = () => {
  const ref = useRef<HTMLDivElement>(null)
  const barRef = useRef(null)
  const [active, setActive] = useState<number>(0)

  useEffect(() => {
    const switchTab = (direction: 'forward' | 'backward') => {
      const validateForward = direction === 'forward' && active + 1 < 3
      const validateBackward = direction === 'backward' && active - 1 >= 0

      validateForward && setActive(active + 1)
      validateBackward && setActive(active - 1)
    }

    const tabFront = () => {
      switchTab('forward')
    }

    const tabBack = () => {
      switchTab('backward')
    }

    const tabFirst = () => {
      setActive(0)
    }

    const tabLast = () => {
      setActive(2)
    }

    eventEmitter.once('switch-tab-forward', tabFront)
    eventEmitter.once('switch-tab-backward', tabBack)
    eventEmitter.once('switch-tab-first', tabFirst)
    eventEmitter.once('switch-tab-last', tabLast)

    return () => {
      eventEmitter.removeListener('switch-tab-forward', tabFront)
      eventEmitter.removeListener('switch-tab-backward', tabBack)
      eventEmitter.removeListener('switch-tab-first', tabFirst)
      eventEmitter.removeListener('switch-tab-last', tabLast)
    }
  }, [active])
  return (
    <div id="tokens" data-nav-section="Tokens" className={styles.tsummary} ref={ref} data-animation="tsummary">
      <div className={styles.tsummarywrap} data-animation="tsummary-wrap">
        <h2 className={styles.tsummary_header}>Guild Token Summary</h2>
        <p className={styles.tsummary_subheader}>
          Guild Gem (GDG), Guild Coin (GDC) and Guild Dust (GDD) are designed with the following principles in mind:
        </p>

        <div className={styles.tsummary_sections}>
          <div className={styles.tsummary_section}>
            <div className={styles.tsummary_tab}>
              <div className={styles.tsummary_alert} data-animation="summary-alert">
                <figure className={styles.tsummary_alerticon}>
                  <img src={tokenSummaries[active].icon} alt="feature summary" />
                </figure>
                {tokenSummaries[active].alert}
              </div>

              <div className={styles.tsummary_title} data-animation="summary-title">
                {tokenSummaries[active].title}
              </div>

              <div className={styles.tsummary_bars}>
                <span className={styles.tsummary_bar}></span>
                <span className={styles.tsummary_bar}></span>
                <span className={styles.tsummary_bar}></span>

                <span
                  ref={barRef}
                  className={styles.tsummary_barindicator}
                  style={{
                    left: `${active * 33.333}%`,
                  }}
                ></span>
              </div>

              <p className={styles.tsummary_desc} data-animation="summary-desc">
                {tokenSummaries[active].description}
              </p>

              {/* <div
                className={styles.tsummary_buttons}
                data-animation="summary-buttons"
              >
                {tokenSummaries[active].buttons.map((item, index) => (
                  <a
                    key={index}
                    href={item.url}
                    data-disabled="true"
                    className={styles.tsummary_btn}
                  >
                    {!!item.icon && (
                      <figure className={styles.tsummary_btnicon}>
                        <img src={item.icon} alt="buy token" loading="lazy" />
                      </figure>
                    )}
                    {item.text}
                  </a>
                ))}
              </div> */}
            </div>
          </div>

          <div className={styles.tsummary_section} data-animation="tsummary-coin">
            <img src={tokenSummaries[active].coin} alt="info" loading="lazy" />
          </div>
        </div>
      </div>
    </div>
  )
}

export default TestSection
